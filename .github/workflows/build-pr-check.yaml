name: Build BE service - PR check

on:
  pull_request:
    branches: [main, master, major*, minor*]
    types: [opened, reopened, synchronize, edited]
env:
  total-runners: 5

# Permissions block to grant write permissions to the 'checks' API
permissions:
  contents: read
  checks: write  # This is needed to create check runs in the GitHub UI
  actions: write

jobs:
  runner-indexes:
    runs-on: ubuntu-latest
    name: Generate runner indexes
    outputs:
      json: ${{ steps.generate-index-list.outputs.json }}
    steps:
      - id: generate-index-list
        run: |
          MAX_INDEX=$((${{ env.total-runners }}-1))
          INDEX_LIST=$(seq 0 ${MAX_INDEX})
          INDEX_JSON=$(jq --null-input --compact-output '. |= [inputs]' <<< ${INDEX_LIST})
          echo "::set-output name=json::${INDEX_JSON}"
          
  run-parallel-tests:
    runs-on: ubuntu-latest
    name: "Runner #${{ matrix.runner-index }}: Run test suite in parallel"
    needs:
      - runner-indexes
    strategy:
      matrix:
        runner-index: ${{ fromjson(needs.runner-indexes.outputs.json) }}  
    steps:
      - name: Checkout project sources
        uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Restore cached JUnit test results (if available)
      - name: Restore JUnit Cache
        id: cache-junit
        uses: actions/cache/restore@v4
        with:
          path: |
            ./downloaded-test-results/**/TEST-*.xml
          key: junit-${{github.base_ref}}-v1
          restore-keys: |
            junit-${{github.base_ref}}

      # Conditional logic: Check if JUnit results are available and set an output variable
      - name: Check if JUnit Results Exist
        id: check-junit
        run: |
          if [ -d "downloaded-test-results" ] && find downloaded-test-results -type f -name "TEST-*.xml" | grep -q .; then
            echo "JUnit results found. Setting flag to true."
            echo "::set-output name=use-junit-results::true"
            echo "use_junit_results=true" >> $GITHUB_ENV
          else
            echo "JUnit results not found. Setting flag to false."
            echo "::set-output name=use-junit-results::false"
            echo "use_junit_results=false" >> $GITHUB_ENV
          fi

      - name: Check Cache Status
        id: cache-status
        run: |
          echo "Cache Hit Status: ${{ env.use_junit_results }}"

      - name: List Cached Files
        if: env.use_junit_results == 'true'
        run: |
          echo "Cached files:"
          ls -la ./downloaded-test-results   

      - name: List JUnit Results Directory
        run: ls -R ./downloaded-test-results

      - uses: scruplelesswizard/split-tests@v1-alpha.1
        id: split-tests
        name: Split tests
        with:
          glob: parallel-backend-tests/core/**/*Test.java
          split-total: ${{ env.total-runners }}
          split-index: ${{ matrix.runner-index }}
          junit-path: ${{ env.use_junit_results == 'true' && './downloaded-test-results/**/*.xml' || '' }}

      - name: Set image variable for tests
        run: |
              # Store original paths in a variable
              ORIGINAL_PATHS="${{ steps.split-tests.outputs.test-suite }}"

              if [ -z "$ORIGINAL_PATHS" ]; then
                echo "No tests found to run."
                exit 1
              fi

              echo "Original file paths: $ORIGINAL_PATHS"

              # Convert file paths to the desired format using a simpler method
              # Convert file paths to the desired format using a simpler method
              TEST_CLASSES=""
              for path in $ORIGINAL_PATHS; do
                # Remove base directory path, replace slashes with dots, remove .java, format with --tests
                class_name=$(echo "$path" | sed 's|parallel-backend-tests/core/src/test/java/||; s|/|.|g; s|\.java$||')
                TEST_CLASSES="$TEST_CLASSES --tests '$class_name'"
              done

              # Ensure TEST_CLASSES is not empty after formatting
              if [ -z "$TEST_CLASSES" ]; then
                echo "No test classes found after formatting!"
                exit 1
              fi

              echo "Formatted test classes: ${TEST_CLASSES}"
              echo "Command to execute: ./gradlew test ${TEST_CLASSES} --warning-mode all "
              echo "image=${TEST_CLASSES}" >> $GITHUB_ENV
              echo "./gradlew core:test ${{ env.image }} --warning-mode all "
      - name: Run tests with image variable
        run: |
              echo "./gradlew core:test ${{ env.image }} --warning-mode all "

              # Run Gradle with fully qualified test class names
              cd parallel-backend-tests
              chmod +x ./gradlew
              #./gradlew core:test --tests 'org.parallel.big.BigExecution3Test' --warning-mode all
              #./gradlew core:test --tests 'org.parallel.big.BigExecution6Test' --tests 'org.parallel.huge.HugeExecution3Test' --warning-mode all
              ./gradlew core:test ${{ env.image }} --warning-mode all 

      - name: Upload Test Results
        if: success() || failure() # always run even if the previous step fails
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.runner-index }}
          path: parallel-backend-tests/core/build/test-results/test
    
  aggregate-results:
    runs-on: ubuntu-latest
    name: Aggregate test results and cache unified report
    needs: run-parallel-tests
    steps:
    - name: Checkout project sources
      uses: actions/checkout@v3

    - name: Download Test Results for All Runners
      env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Add this line to set the token
      run: |
        for i in $(seq 0 $((${{ env.total-runners }} - 1))); do
          echo "Downloading test results for runner $i"
          gh run download --name "test-results-${i}" --dir "./downloaded-test-results/runner-${i}" || echo "Runner $i had no results"
        done    

    # Determine if we should update the cache
    - name: Determine Cache Update
      id: cache-update
      if: success() || failure() # always run even if the previous step fails
      run: |
        if [ "${GITHUB_EVENT_NAME}" == "pull_request" ]; then
          echo "Updating cache because it's a PR."
          echo "CACHE_UPDATE=true" >> $GITHUB_ENV
        elif [ "${GITHUB_REF#refs/heads/}" == "main" ] || [ "${GITHUB_REF#refs/heads/}" == "show-junit-report" ]; then
          echo "Updating cache because it's a branch match."
          echo "CACHE_UPDATE=true" >> $GITHUB_ENV
        else
          echo "CACHE_UPDATE=false" >> $GITHUB_ENV
        fi    

    - name: Update cache with latest test results (if merging minor to major)
      if: env.CACHE_UPDATE == 'true' && (success() || failure())
      uses: actions/cache@v4
      with:
        key: junit-${{github.base_ref}}-v1
        path: |
          ./downloaded-test-results/**/TEST-*.xml

    - name: Display Test Results in UI
      uses: mikepenz/action-junit-report@v4.3.1
      if: success() || failure() # always run even if the previous step fails
      with:
        report_paths: './downloaded-test-results/**/TEST-*.xml'
        check_name: 'Parallel backend Tests Result'
        detailed_summary: true
        
              
