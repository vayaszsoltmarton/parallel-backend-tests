plugins {

}

plugins {
    id 'io.franzbecker.gradle-lombok' version '5.0.0' // *MUST* come before 'java'
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'org.liquibase.gradle' version '2.2.0'
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
}

group = "org.example"

repositories {
    mavenCentral()
}

jar {
    enabled = false
}

// build for Java 17
sourceCompatibility = 17
targetCompatibility = 17

lombok {
    version = '1.18.32'
    sha256 = "" // skip verifyLombok task
}

dependencies {
    testImplementation(platform("org.junit:junit-bom:5.10.0"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    // logging: Logback
    implementation "org.springframework.boot:spring-boot-starter-logging"
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

import groovy.xml.*

tasks.register('addFileAttributeToJUnitReport') {
    doLast {
        def testReportDir = file("$buildDir/test-results/test")

        // Ensure the test results directory exists
        if (testReportDir.exists()) {
            testReportDir.eachFileRecurse { file ->
                // Process only XML files
                if (file.name.endsWith('.xml')) {
                    // Parse the XML file
                    def xml = new XmlParser().parse(file)

                    // Add 'file' attribute to each <testsuite> element
                    xml.testsuite.each { suite ->
                        suite.@file = suite.@name  // Use suite name as the file attribute
                    }

                    // Add 'file' attribute to each <testcase> element (optional, can be skipped if not needed)
                    xml.testsuite.testcase.each { test ->
                        test.@file = test.@classname  // Use classname as the file attribute for test cases
                    }

                    // Serialize the modified XML and overwrite the original file
                    def writer = new StringWriter()
                    new XmlNodePrinter(new PrintWriter(writer)).print(xml)
                    file.text = writer.toString()  // Write back the modified XML
                }
            }
        } else {
            println "Test report directory does not exist: $testReportDir"
        }
    }
}

// Register the test task
tasks.named('test').configure {
    useJUnitPlatform()

    // To allow test filtering
    filter {
        includeTestsMatching "*"
    }

    reports {
        junitXml {
            // Set the destination directory for XML reports
            destination = file("$buildDir/test-results/test")
        }
    }

    // Ensure the addFileAttributeToJUnitReport task runs after the test task
    finalizedBy(tasks.named('addFileAttributeToJUnitReport'))
}

//// Ensure the post-processing task runs after the test task completes
tasks.named('test').configure {
    finalizedBy('addFileAttributeToJUnitReport')
}
