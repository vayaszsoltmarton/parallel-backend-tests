plugins {

}

plugins {
    id 'io.franzbecker.gradle-lombok' version '5.0.0' // *MUST* come before 'java'
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'org.liquibase.gradle' version '2.2.0'
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
}

group = "org.example"

repositories {
    mavenCentral()
}

jar {
    enabled = false
}

// build for Java 17
sourceCompatibility = 17
targetCompatibility = 17

lombok {
    version = '1.18.32'
    sha256 = "" // skip verifyLombok task
}

dependencies {
    testImplementation(platform("org.junit:junit-bom:5.10.0"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    // logging: Logback
    implementation "org.springframework.boot:spring-boot-starter-logging"
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

import groovy.xml.*

tasks.register('addFileAttributeToJUnitReport') {
    doLast {
        def testReportDir = file("$buildDir/test-results/test")

        if (testReportDir.exists()) {
            println "Test report directory found: $testReportDir"
            testReportDir.eachFileRecurse { file ->
                if (file.name.endsWith('.xml')) {
                    println "Processing file: ${file.name}"

                    // Parse the XML file
                    def xml = new XmlParser().parse(file)

                    // Print the structure of the testsuite to verify
                    println "Root XML element: ${xml.name()}"

                    // Check and update the testsuite elements
                    xml.testsuite.each { suite ->
                        println "Found testsuite: ${suite.@name}"
                        // Add the 'file' attribute to the testsuite
                        suite.@file = suite.@name
                        println "Added 'file' attribute to testsuite: ${suite.@file}"
                    }

                    // Check and update the testcase elements within each testsuite
                    xml.testsuite.each { suite ->
                        suite.testcase.each { test ->
                            println "Found testcase: ${test.@classname}"
                            // Add the 'file' attribute to the testcase
                            test.@file = test.@classname
                            println "Added 'file' attribute to testcase: ${test.@file}"
                        }
                    }

                    // Serialize and save the XML back to the file
                    def writer = new StringWriter()
                    new XmlNodePrinter(new PrintWriter(writer)).print(xml)

                    // Overwrite the file with the modified XML
                    file.withWriter('UTF-8') { out ->
                        out.write(writer.toString())
                    }

                    println "File updated successfully: ${file.name}"
                }
            }
        } else {
            println "Test report directory does not exist: $testReportDir"
        }
    }
}

// Register the test task
tasks.named('test').configure {
    useJUnitPlatform()

    // To allow test filtering
    filter {
        includeTestsMatching "*"
    }

    reports {
        junitXml {
            // Set the destination directory for XML reports
            destination = file("$buildDir/test-results/test")
        }
    }

    // Ensure the addFileAttributeToJUnitReport task runs after the test task
    finalizedBy(tasks.named('addFileAttributeToJUnitReport'))
}

//// Ensure the post-processing task runs after the test task completes
tasks.named('test').configure {
    finalizedBy('addFileAttributeToJUnitReport')
}
